@implements IDisposable
@using System.Timers
@using Microsoft.JSInterop
@using ChatFish.Components
@using ChatFish.Services
@using ChatFish.State
@inject IJSRuntime JSRuntime
@inject Animator Animator

<div @ref="fishElement" class="fish-container"
    style="left: @(_fishAnimation.Position.Left)px; top: @(_fishAnimation.Position.Top)px;">
    <MessageBubble Message="@State.CurrentMessage" IsVisible="@State.IsMessageVisible"
        FishDirection="@_fishAnimation.Velocity.Direction" />
    <div
        class="fish-wrapper @(_fishAnimation.Velocity.Direction.ToString().ToLower()) @(State.IsMessageVisible ? "message-visible" : "")">
        <img class="fish-img" src="@FishImagePath" alt="@($"{State.Color} fish")"
            aria-label="@($"{State.Color} fish {(IsClientFish ? "- your fish" : "")}")"
            style="transform: scale(@State.Scale)" />
    </div>
</div>
<style>
    .fish-container {
        position: absolute;
        display: flex;
        align-items: center;
        flex-direction: column;
        animation: float 4s infinite ease-in-out;
    }

    .fish-img {
        z-index: 1;
    }

    .fish-img.right {
        align-self: flex-start;
    }

    .fish-img.left {
        align-self: flex-end;
    }

    .fish-wrapper {
        transition: transform 1s ease-in-out;
    }

    .fish-wrapper.right {
        transform: translateX(0);
    }

    .fish-wrapper.left {
        transform: translateX(0);
    }

    @* .fish-wrapper.right.message-visible {
        transform: translateX(-50px);
    }

    .fish-wrapper.left.message-visible {
        transform: translateX(50px);
    } *@    
</style>
@code {
    [Parameter]
    public FishState State { get; set; } = new();

    [Parameter]
    public bool IsClientFish { get; set; }

    public string FishImagePath => $"fish/{State.Color}/{_fishAnimation.Velocity.Direction}-{GetFrameDuration()}.png";

    private DotNetObjectReference<Fish>? _dotNetRef;
    private ElementReference fishElement;
    private readonly FishAnimation _fishAnimation = new();

    [JSInvokable]
    public async Task OnDraggingStart()
    {
        _fishAnimation.Enabled = false;
        await Task.CompletedTask;
    }

    [JSInvokable]
    public async Task OnDraggingComplete(double left, double top)
    {
        _fishAnimation.MoveFish(new Point(left, top));
        _fishAnimation.Enabled = true;
        await Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // place the new fish at a random point within the tank
            var tankRect = await JSRuntime.InvokeAsync<ClientRect>("getTankRect");
            _fishAnimation.InitializePosition(tankRect);
            StateHasChanged(); // Ensure component re-renders on UI thread

            _dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("makeDraggable", fishElement, _dotNetRef);
            if (State != null)
            {
                State.MessageChanged += MessageChanged;
            }
        }
    }

    private void MessageChanged()
    {
        StateHasChanged();
    }

    protected override void OnInitialized() => Animator.OnAnimationTick += OnTimerElapsedAsync;

    private async void OnTimerElapsedAsync(ClientRect tankRect) => await MoveFishAsync(tankRect);

    private async Task MoveFishAsync(ClientRect tankRect)
    {
        if (_fishAnimation.Enabled)
        {
            var fishRect = await JSRuntime.InvokeAsync<ClientRect>("getElementRect", fishElement);

            _fishAnimation.IncrementPosition(tankRect, fishRect);

            await InvokeAsync(StateHasChanged); // Ensure component re-renders on UI thread
        }
    }

    // there are different animated pngs that are used based on the fish's speed
    // this is because the animation speed cannot be set dynamically
    private string GetFrameDuration()
    {
        if (_fishAnimation.Velocity.Dx > 3.0)
        {
            return "66";
        }

        if (_fishAnimation.Velocity.Dx > 2.25)
        {
            return "75";
        }

        return "100";
    }

    public void Dispose()
    {
        Animator.OnAnimationTick -= OnTimerElapsedAsync;
        _fishAnimation.Enabled = false;
        _dotNetRef?.Dispose();
        State?.Dispose();
    }
}
