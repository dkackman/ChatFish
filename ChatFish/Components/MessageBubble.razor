@using Ganss.Xss
@using ChatFish.State
@inject IJSRuntime JSRuntime
@inject HtmlSanitizer Sanitizer

<div @ref="bubbleElement"
    class="message-bubble @(IsVisible ? "visible" : "hidden") @Sanitizer.Sanitize(Message.Modifier) @FishDirection.ToString().ToLower()"
    role="status" aria-live="polite">
    @(Sanitizer.Sanitize(Message.Message))
</div>

<style>
    .message-bubble {
        position: absolute;
        /* Remove any transforms that offset the bubble */
        /* transform: translate(-50%, -50%); */
        /* transform: translateY(-100%); */
        /* ... existing styles ... */
        background-color: rgba(255, 255, 255, 0.4);
        border: 2px solid rgba(255, 255, 255, 0.6);
        border-radius: 50%;
        padding: 10px;
        max-width: 250px;
        word-wrap: break-word;
        transition: opacity 0.5s ease-in-out;
        box-shadow: 0 0 10px rgba(255, 255, 255, 0.3), inset 0 0 20px rgba(255, 255, 255, 0.3);
        backdrop-filter: blur(2px);
        animation: float 4s infinite ease-in-out;
        /* Add these properties to center the text */
        display: flex;
        justify-content: center;
        align-items: center;
        text-align: center;
    }

    /* Align the bubble so it's centered at its position */
    .message-bubble.left,
    .message-bubble.right {
        transform: translate(-50%, -50%);
    }

    .message-bubble::before,
    .message-bubble::after {
        content: '';
        position: absolute;
        background-color: rgba(255, 255, 255, 0.4);
        border: 1px solid rgba(255, 255, 255, 0.6);
        border-radius: 50%;
    }

    /* Trailing bubbles for left-facing fish */
    .message-bubble.left::before,
    .message-bubble.left::after {
        animation: floatLeft 3s infinite ease-in-out;
    }

    .message-bubble.left::before {
        width: 15px;
        height: 15px;
        left: 50%;
        top: 110%;
        transform: translate(0%, -50%);
    }

    .message-bubble.left::after {
        width: 10px;
        height: 10px;
        left: 95%;
        top: 130%;
        transform: translate(0%, -50%);
    }

    /* Trailing bubbles for right-facing fish */
    .message-bubble.right::before,
    .message-bubble.right::after {
        animation: floatRight 3s infinite ease-in-out;
    }

    .message-bubble.right::before {
        width: 15px;
        height: 15px;
        right: 50%;
        top: 110%;
        transform: translate(0%, -50%);
    }

    .message-bubble.right::after {
        width: 10px;
        height: 10px;
        right: 95%;
        top: 130%;
        transform: translate(0%, -50%);
    }

    @@keyframes floatLeft {

        0%,
        100% {
            opacity: 1;
            transform: translate(0%, -50%) scale(1);
        }

        50% {
            opacity: 0.5;
            transform: translate(10%, -60%) scale(0.8);
        }
    }

    @@keyframes floatRight {

        0%,
        100% {
            opacity: 1;
            transform: translate(0%, -50%) scale(1);
        }

        50% {
            opacity: 0.5;
            transform: translate(-10%, -60%) scale(0.8);
        }
    }

    .message-bubble.left {
        transform: translateY(-100%);
    }

    .message-bubble.right {
        transform: translate(-100%, -100%);
    }

    .message-bubble.hidden {
        opacity: 0;
    }

    .message-bubble.visible {
        opacity: 1;
    }

    .message-bubble.shout {
        font-weight: bold;
        text-transform: uppercase;
        font-size: larger;
        color: #FF0000;
    }

    .message-bubble.whisper {
        font-weight: italic;
        text-transform: lowercase;
        font-size: smaller;
        color: #60666e;
    }

    // Add more modifier styles as needed
</style>

@code {
    [Parameter] public ChatMessage Message { get; set; } = new();
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public string Position { get; set; } = "";
    [Parameter] public Direction FishDirection { get; set; }
    [Parameter] public ElementReference FishElement { get; set; }

    private ElementReference bubbleElement;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsVisible)
        {
            await AdjustBubblePosition();
        }
    }

    private async Task AdjustBubblePosition()
    {
        var fishRect = await JSRuntime.InvokeAsync<ClientRect>("getElementRect", FishElement);
        var bubbleRect = await JSRuntime.InvokeAsync<ClientRect>("getElementRect", bubbleElement);

        double bubbleX;
        double bubbleY;

        // Offsets to position the bubble above and ahead of the fish
        double xOffset;
        double yOffset = bubbleRect.Height; // Position the bubble above the fish

        if (FishDirection == Direction.Right)
        {
            xOffset = fishRect.Width * 0.3; // Adjust as needed for horizontal offset
            bubbleX = fishRect.Left + fishRect.Width + xOffset;
        }
        else
        {
            xOffset = fishRect.Width * 0.3; // Adjust as needed for horizontal offset
            bubbleX = fishRect.Left - bubbleRect.Width - xOffset;
        }

        // Position the bubble above the fish
        bubbleY = fishRect.Top - bubbleRect.Height;// * 0.5; // Adjust as needed for vertical offset

        await JSRuntime.InvokeVoidAsync("setElementPosition", bubbleElement, bubbleX, bubbleY);
    }
}