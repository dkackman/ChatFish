@using ChatFish.Components
@using Ganss.Xss
@inject HtmlSanitizer Sanitizer

@if (IsVisible && ToastMessage != null)
{
    <div class="@GetPositionClasses()">
        <div class="toast show custom-toast" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header custom-toast-header">
                <strong class="me-auto">@(Sanitizer.Sanitize(ToastMessage.Title))</strong>
                @if (ShowCloseButton)
                {
                    <button type="button" class="btn-close custom-close" @onclick="Close" aria-label="Close"></button>
                }
            </div>
            <div class="toast-body custom-toast-body">
                <p>@(Sanitizer.Sanitize(ToastMessage.Caption))</p>
                @if (ToastMessage.Messages.Any())
                {
                    <ul class="list-unstyled mb-0 ps-3">
                        @foreach (var message in ToastMessage.Messages)
                        {
                            <li class="ms-3 mb-2">@((MarkupString)Sanitizer.Sanitize(message))</li>
                        }
                    </ul>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public Toast? ToastMessage { get; set; }
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public string Position { get; set; } = "TopRight";
    [Parameter] public bool ShowCloseButton { get; set; } = true;
    [Parameter] public EventCallback OnClose { get; set; }

    private void Close()
    {
        IsVisible = false;
        OnClose.InvokeAsync();
    }

    private string GetPositionClasses()
    {
        var baseClasses = "position-fixed p-3";
        return Position.ToLower() switch
        {
            "topright" => $"{baseClasses} top-0 end-0",
            "topleft" => $"{baseClasses} top-0 start-0",
            "bottomright" => $"{baseClasses} bottom-0 end-0",
            "bottomleft" => $"{baseClasses} bottom-0 start-0",
            _ => $"{baseClasses} top-0 end-0",
        };
    }
}

<style>
    .custom-toast {
        background-color: rgba(255, 255, 255, 0.4);
        border: 2px solid rgba(255, 255, 255, 0.6);
        border-radius: 15px;
        box-shadow: 0 0 10px rgba(255, 255, 255, 0.3), inset 0 0 20px rgba(255, 255, 255, 0.3);
        backdrop-filter: blur(2px);
        animation: float 4s infinite ease-in-out;
    }

    .custom-toast-header {
        background-color: rgba(255, 255, 255, 0.6);
        border-bottom: 1px solid rgba(255, 255, 255, 0.6);
        border-top-left-radius: 13px;
        border-top-right-radius: 13px;
    }

    .custom-toast-body {
        background-color: rgba(255, 255, 255, 0.2);
        border-bottom-left-radius: 13px;
        border-bottom-right-radius: 13px;
    }

    .custom-close {
        background-color: rgba(255, 255, 255, 0.6);
    }

    .custom-toast::before,
    .custom-toast::after {
        content: '';
        position: absolute;
        background-color: rgba(255, 255, 255, 0.4);
        border: 1px solid rgba(255, 255, 255, 0.6);
        border-radius: 50%;
    }

    .custom-toast::before {
        width: 15px;
        height: 15px;
        bottom: -20px;
        left: 20%;
        animation: float 3s infinite ease-in-out 0.5s;
    }

    .custom-toast::after {
        width: 10px;
        height: 10px;
        bottom: -35px;
        left: 40%;
        animation: float 3s infinite ease-in-out 1s;
    }

    @@keyframes float {

        0%,
        100% {
            transform: translateY(0);
        }

        50% {
            transform: translateY(-10px);
        }
    }
</style>