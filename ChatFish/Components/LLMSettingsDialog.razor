@inherits FloatingComponent
@using ChatFish.Services
@inject LLMService LLMService
@inject IJSRuntime JSRuntime
@implements IDisposable

@if (IsVisible)
{
    <div class="@GetPositionClasses()" role="dialog" aria-labelledby="llm-settings-title">
        <div class="floating-component">
            <div class="floating-header">
                <strong id="llm-settings-title" class="me-auto">Configure Chat LLM Settings</strong>
                @if (ShowCloseButton)
                {
                    <button type="button" class="btn-close custom-close floating-close" @onclick="CloseComponent"
                        aria-label="Close"></button>
                }
            </div>
            <div class="floating-body">
                <div class="download-container">
                    <label for="model-selection" class="visually-hidden">Select LLM Model</label>
                    <select id="model-selection" @bind="LLMService.SelectedModel" aria-label="Select LLM Model">
                        @foreach (var model in LLMService.AvailableModels)
                        {
                            <option value="@model">@model</option>
                        }
                    </select>
                    <button id="download" @onclick="InitializeWebLLMEngine" type="button"
                        aria-label="Download selected model">Download</button>
                </div>
                <p id="download-status" class="@(isDownloadStatusVisible ? "" : "hidden")" aria-live="polite">
                    @downloadStatus</p>
            </div>
        </div>
    </div>
}

@code {
    private string downloadStatus = "";
    private bool isDownloadStatusVisible = false;
    private DotNetObjectReference<LLMSettingsDialog>? _dotNetRef;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        LLMService.SelectedModelChanged += OnSelectedModelChanged;
        try
        {
            await LLMService.OnInitializedAsync();
        }
        catch (JSException)
        {
            Console.WriteLine("Failed to get available models or restore selected model. Using default.");
        }
    }

    private async Task InitializeWebLLMEngine()
    {
        isDownloadStatusVisible = true;
        try
        {
            downloadStatus = "Initializing WebLLM engine...";
            await JSRuntime.InvokeVoidAsync("initializeWebLLMEngine", LLMService.SelectedModel, _dotNetRef);
        }
        catch (JSException ex)
        {
            Console.WriteLine(ex.Message);
            downloadStatus = $"Failed to initialize WebLLM engine. {ex.Message}";
        }
    }

    private void OnSelectedModelChanged() => StateHasChanged();


    [JSInvokable]
    public void UpdateEngineInitProgress(string text, double progress)
    {
        downloadStatus = $"{text} - {progress:P0}";
        StateHasChanged();
    }

    public void Dispose()
    {
        _dotNetRef?.Dispose();
        LLMService.SelectedModelChanged -= OnSelectedModelChanged;
    }
}
<style>
    .floating-component {
        width: 350px;
        /* Set a fixed width */
        max-width: 100%;
        /* Ensure it doesn't exceed the screen width on small devices */
    }

    #model-selection,
    #download {
        width: 100%;
        margin-bottom: 10px;
        padding: 5px;
        border-radius: 5px;
        border: 1px solid rgba(255, 255, 255, 0.6);
        background-color: rgba(255, 255, 255, 0.4);
    }

    #download {
        cursor: pointer;
    }

    #download-status {
        margin-top: 10px;
    }

    .hidden {
        display: none;
    }
</style>