@inherits FloatingComponent
@using ChatFish.Services
@inject LLMService LLMService
@inject IJSRuntime JSRuntime
@inject ILogger<LLMSettingsDialog> Logger
@implements IDisposable

@if (IsVisible)
{
    <div class="@GetPositionClasses()" role="dialog" aria-labelledby="llm-settings-title">
        <div class="floating-component">
            <div class="floating-header">
                <strong id="llm-settings-title" class="me-auto">Configure Chat LLM Settings</strong>
                @if (ShowCloseButton)
                {
                    <button type="button" class="btn-close custom-close floating-close" @onclick="CloseComponent"
                        aria-label="Close"></button>
                }
            </div>
            <div class="floating-body">
                <div class="download-container">
                    <label for="model-selection" class="visually-hidden">Select LLM Model</label>
                    <select id="model-selection" @bind="LLMService.SelectedModel" aria-label="Select LLM Model">
                        @foreach (var model in LLMService.AvailableModels)
                        {
                            <option value="@model">@model</option>
                        }
                    </select>
                    <button id="download" @onclick="InitializeWebLLMEngine" type="button"
                        aria-label="Download selected model">Download</button>
                </div>
                <div class="@(isDownloadStatusVisible ? "" : "hidden")">
                    <label for="download-progress" class="visually-hidden">Download progress</label>
                    <progress id="download-progress" value="@progressValue" max="100" class="w-100 mb-2" aria-valuemin="0"
                        aria-valuemax="100" aria-valuenow="@progressValue.ToString("F0")"
                        aria-valuetext="@($"{progressValue:F0}% complete")">
                        @progressValue.ToString("F0")%
                    </progress>
                    <p id="download-status" aria-live="polite">@downloadStatus</p>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private string downloadStatus = "";
    private bool isDownloadStatusVisible = false;
    private double progressValue = 0;

    protected override async Task OnInitializedAsync()
    {
        LLMService.SelectedModelChanged += OnSelectedModelChanged;
        LLMService.UpdateEngineInitProgressChanged += UpdateEngineInitProgress;
        LLMService.MessageError += OnMessageError;
        try
        {
            await LLMService.OnInitializedAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to get available models or restore selected model. Using default.");
        }
    }

    private async Task InitializeWebLLMEngine()
    {
        isDownloadStatusVisible = true;
        try
        {
            await LLMService.InitializeWebLLMEngine();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to initialize the LLM engine.");
        }
    }

    private void OnSelectedModelChanged() => StateHasChanged();

    public void OnMessageError(string text)
    {
        downloadStatus = text;
        progressValue = 0;
        StateHasChanged();
    }

    public void UpdateEngineInitProgress(string text, double progress)
    {
        downloadStatus = text;
        progressValue = progress * 100; // Convert to percentage
        StateHasChanged();
    }

    public void Dispose()
    {
        LLMService.SelectedModelChanged -= OnSelectedModelChanged;
        LLMService.UpdateEngineInitProgressChanged -= UpdateEngineInitProgress;
        LLMService.MessageError -= OnMessageError;
    }
}

<style>
    .floating-component {
        width: 350px;
        /* Set a fixed width */
        max-width: 100%;
        /* Ensure it doesn't exceed the screen width on small devices */
    }

    #model-selection,
    #download {
        width: 100%;
        margin-bottom: 10px;
        padding: 5px;
        border-radius: 5px;
        border: 1px solid rgba(255, 255, 255, 0.6);
        background-color: rgba(255, 255, 255, 0.4);
    }

    #download {
        cursor: pointer;
    }

    #download-status {
        margin-top: 10px;
    }

    .hidden {
        display: none;
    }

    progress {
        -webkit-appearance: none;
        appearance: none;
    }

    progress::-webkit-progress-bar {
        background-color: rgba(255, 255, 255, 0.4);
        border-radius: 5px;
    }

    progress::-webkit-progress-value {
        background-color: rgba(255, 255, 255, 0.8);
        border-radius: 5px;
    }

    progress::-moz-progress-bar {
        background-color: rgba(255, 255, 255, 0.8);
        border-radius: 5px;
    }
</style>